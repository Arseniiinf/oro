#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
#include<stdbool.h>
#include<math.h>


int karel_asleep(const char position){
 if(position == '-')
  return 1;
 else{
  if(position == '|')
   return 0;
 }
 return -1;
}


funkcia direction_degree(const char dir){
 if(dir=='E'){
  return 0;
 }
 else if(dir=='N'){
  return 90;
 }
 else if(dir=='W'){
  return 180;
 }
 else if(dir=='S'){
  return 270;
 }
 else{
  return -1;
 }
}

funkcia swap_sign(const int size, int array[]){
  if(array!=NULL){
   for(int i=0; i<size; i++){
    if(array[i]!=0){
     array[i]*=-1;
    }
   }
  }
}







funkcia change_whites(char string[]){
  if(string==NULL){
   return;
  }
  int en=strlen(string);
  for(int i=0;i<len;i++){
   if(string[i]== ' ' || string[i]=='\n){
    string[i]='.';
   }
  }
}

funkcia count_whites(const char string[]){
 int a=0;
 if(string==NULL){
  return -1;
 }
 for(int i=0; i<strlen(string); i++){
  if(string[i]==' '||string[i]=="\t"||string[i]=='\n'){
   a++;
  }
 }
 return a;
  return -2;
}

funkcia string_to upper(char string[]){
  if(string != NULL){
   for(int i=0; i<strlen(string);i++){
    if(string[i]>=97 && string[i]<=122){
     string[i]=toupper(string[i]);
    }
   }
  }
} 


funkcia string_to _upper(char string[]){
  if(string==NULL){
   return;
  }
  for(int i=0; string[i] != '\0'; i++){
   if(isalpha(string[i])){
    string[i]=toupper(string[i]);
   }
  }
}






funkcia min_2d(const int size, int array[][size]){
 if(array!=NULL){
  int min=array[0][0];
  for(int i=0;i<size;i++){
   for(int j=0;j<size;j++){
    if(array[i][j]<min)
    min=array[i][j];
   }
  }
  return min;
 }
 else{
  return -1;
 }
 return -2;
}

funkcia max_2d(const int size, int array[][size]){
 if(array==NULL){
  return -1;
 }
 int max=array[0][0];
 for(int i=0;i<size;i++){
  for(int j=0;j<size;j++){
   if(array[i][j]>max){
    max=array[i][j];
   }
  }
 }
 return max;
 return -2;}

funkcia sum_digits(const long int number){ 
if(number<0){
  return 0; 
 int sum=0;
 int newnumber=number;
 while(newnumber !=0){
  sum += newnumber%10;
  newnumber/=10; }
return sum;}

funkcia fib2array(const int size, int array[]){
 if(array != NULL){
  array[0]=1;
  array[1]=1;
  if(size>2){
   for(int i=2; i<size; i++){
    array[i]=array[i-2]+array[i-2];
   }
  }
 }
}
funkcia div_by_3(const int num){
 if(num%3==0){
  return 1;}
 else{
   return 0;}
 return -1;}

fcia sum_greater(const int a,const int b,const int c){
 int sum=0;
 if(a==b && a==c){
  return a+b; }
if(a>=b && a>=c){
  sum+=a; }
if(b>c){
   sum+=b; }
Else{
   sum+=c; }
return sum;}
if(b>=a && b>=c){
  sum+=b;}
  if(a>c){
   sum+=a;}
  else{
   sum+=c;}
  return sum;}
 if(c>=a && c>=b){
  sum+=c;}
  if(a>b){
   sum+=a;}
  else{
   sum+=b;}
  return sum;}
 return -1;

funkcia even(const int num){
  if(num%2==0){
   return 1;}
  else{
    return 0;}
  return -1;
}

funkcia is_vowel(char i){
 if((i=='a'||i=='e'||i=='i'||i=='o'||i=='u'||i=='y')
 ||(i=='A'||i=='E'||i=='I'||i=='O'||i=='U'||i=='Y'||)){
  return 1;
 }
 else{
   return 0;
 }
}


funkcia vowels_count(const char string[]){
 if(string==NULL){
  return -1;}
 int x=strlen(string);
 int count =0;
 for(int y=0;y<x;y++){     if(string[y]=='a'||string[y]=='A'||string[y]=='e'||string[y]=='E'||string[y]=='I'||string[y]=='i'     ||string[y]=='o'||string[y]=='O'||string[y]=='u'||string[y]=='U'||string[y]=='Y'||string[y]=='y'){
   count++;
  }
 }
 return count;
}

funkcia count_zeroes_2d(const int size, int array[][size]){
 if(array==NULL){
  return -1;
 }
 int zeroes=0;
 for(int i=0;i<size;i++){
  for(int j=0;j<size;j++){
   if(array[i][j]==0){
    zeroes++;
   }
  }
 }
 return zeroes;
 return -2;
}

funkcia long_multiplies(const int below){
 if(below>=10000||below<0){
  return -1;
 }
 int result=0;
 for(int i=below-1;i>0;i--){
  if(i%3==0||i%5==0){
   result=result+1;
  }
 }
 return result;
 return -2;
}







funkcia count_vowels(char a, char b){
 // velke - 65(A), 90(Z)
  // male - 97(a), 122(z)
  //int aInt = a;
  //int bInt = b;
  
  int count = 0;
  if ((a >= 'a' && a <= 'z' && b >= 'a' && b <= 'z') ||
      (a >= 'A' && a <= 'Z' && b >= 'A' && b <= 'Z')) {
    if (a < b) {
      for (int i = a; i <= b; i++) {
        char c = i;
        if (is_vowel(c)) {
          count++;
        }
      }
      return count;
    }
    
    if (a > b) {
      for (int i = b; i <= a; i++) {
        char c = i;
        
        if (is_vowel(c)) {
          count++;
        }
      }
      
      return count;
    }
    
    if (a == b) {
      if (is_vowel(a)) {
          count++;
      }
      
      return count;
    }
  } else {
    return 0;
  }
  
  return -2;
}











funkcia binary_num(const int num){
 if(num<-1000||num>1000){
  return -1;
 }
 if(num==1||num==0){
  return 1;
 }
 else{
   return0;
 }
}


funkcia last_positive(const int size, const int array[]){
  if(array==NULL||array<0){
   return -1;
  }
  for(int i=0;i<size;i++){
   if(array[i]>0){
    cislo++;
   }
   return cislo;
   return -2;
}

funkcia is_valid(const int num){
 if(num>=-130 && num<=130){
  return 1;
 }
 else{
   return 0;
 }
}

funkcia make_direction(const char karel){
 if(karel=='<'){
  return 'W';
 }
 if(karel=='>'){
 return 'E';
 }
 if(karel=='^'){
 return 'N';
 }
 if(karel=='v'){
 return 'S';
 }
 else{
 return '?';
 }
}


funkcia count_positives(const int size, const int array[]){
 if(array==NULL){
  return -1;
 }
 int count=0;
 for(int i=0; i<size; i++){
  if(array[i]>0){
   count ++;
  }
 }
 return count;
}


funkcia all_positives(const int size, const int array[]){
 if(array==NULL){
  return -1;
 }
 int is_positive=1;
 for(int x=0;x<size;x++){
  if(array[x]<=0){
   is_positive=0;
  }
 }
 if(is_possitive==1){
  return 1;
 }
 else{
  return 0;
 }
}

funkcia guess_eval(const int guess, const int my_number){
 if(guess==my_number){
  return 1;
 }
 if(guess>my_number){
  return 0;
 }
 return 2;
}








funkcia same_case(const char a, const char b){
 if(isupper(a)){
  if(isupper(b))
   return 1;
 }
 if(islower(b)){
  if(islower(a))
   return 1;
 }
 if(!isalpha(a)||!isalpha(b)){
  return -1;
 }
 return 0;
}


funkcia compare_ints(const void* a, const void* b){
  int arg1=*(const int*)a;
  int arg2=*(const int*)b;
  if(arg1<arg2){
   return -1;
  }
  if(arg1>arg2){
   return 1;
  }
  return 0;
}

funkcia sort(int array[];const int size){
  if(array==NULL||size<1){
   return;
  }
  qsort(array,size,sizeof(int),compare_ints);
}

funkcia is_in_array_2d(const int num, const int size, int array[][size]){
  if(array==NULL){
   return -1;
  }
  for(int i=0; i<size; i++){
   for(int j=0; j<size; j++){
    if(array[i][j]==num){
     return 1;
    }
   }
   return 0;
}




funkcia is_triangle(const int alpha, const int beta, const int gamma){
 int result=alpha+beta+gamma;
 if(alpha<1||beta<1||gamma<1){
  return -1;
 }
 if(result==180){
  return 1;
 }
 else{
   return 0;
 }
 return -2;
}


funkcia count_negative evens(const int size, const int array[]){
 int a=0;
if(array==NULL){
 return -1;
}
for(int i=0;i<size;i++){
 if(array[i]<0 && array[i]%2==0){
  a++;
 }
 }
 return a;
 return -2;
}

funkcia is_won(const char a, const char b, const char c){
 if(a==b||a==b+32||a==b-32){
  if(a==c||a==c+32||a==c-32){
   return 1;
  }
  else{
    return 0;
  }
 }
 else{
   return 0;
 }
 return -1;
}







funkcia negative_even(const int number){
  if(number<0){
   if(number%2==0){
    return 1;}
  }
  return 0;}

funkcia leap_year(const int year){
  if(year<1||year>4443){
   return -1;}
  if(year%400==0){
   return 1;}
  if(year%100==0){
   return 1;}
  if(year%4==0){
   return 1;}
 return 0;}

funkcia count_leap_years(const int size, const int array[]){
 if(array==NULL){
  return -1;}
  int count=0;
 for(int i=0;i<size;i++){
  if(leap_year(array[i])){
   count++;}
  return count;}
}

int longest_row(const int rows, const int cols, char array[rows][cols]) {
  if(array==NULL||rows<1||cols<1){
    return -1;}
  int longest =0;
  int size =0;
  for(int x=0;x<rows;x++){
    if(strlen(array[x])>size){
      size = strlen(array[x]);
      longest = x;}
  }
return longest;}

int largest_col(const int size, int array[][size]) {
  int indexVar = 0;
  int index = 0;
  int resultMax = 0;
  int resultVar = 0;
  if(array != NULL){
    for(int i = 0; i < size; i++){
      resultVar = 0;
      for(int j = 0; j < size; j++){
        resultVar = resultVar + array[j][i];
        //printf("%d\n", resultVar);
        indexVar = i;}
      if(resultVar > resultMax){
        resultMax = resultVar;
        index = indexVar;}
    }
    return index;}
  else{
    return -1;}
  return -2;}

int is_prime(const int num) {
  int prime = 0;
  if(num<0){return 0;}    
  if(num==1){return 0;}    
  if(num==2){return 1;}    
  if(num==3){return 1;}    
  if(num==5){return 1;}    
  if(num==7){return 1;}    
  if(num%1==0){prime=1}    
  else{prime=0;}    
  if(num%2==0){prime =0;}    
  if(num%3==0){prime =0;}    
  if(num%4==0){prime =0;}    
  if(num%5==0){prime =0;}    
  if(num%6==0){prime =0;}    
  if(num%7==0){prime =0;}    
  if(num%8==0){prime =0;}    
  if(num%9==0){prime =0;}

 if (prime == 1&& (num%num==0)){
   return 1;
 }
  return 0;
}

void sort_desc(int array[], const int size) {
  if(array!=NULL&&size>1){
   int temp,  j, k;
   for (j = 0; j < size; ++j){
      for (k = j + 1; k < size; ++k){
         if (array[j] < array[k]){
            temp = array[j];
            array[j] = array[k];
            array[k] = temp;
         }
      }
   }
 }
}

